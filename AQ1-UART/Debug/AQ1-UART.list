
AQ1-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000770  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08000900  08000900  00001900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a14  08000a14  00002050  2**0
                  CONTENTS
  4 .ARM          00000000  08000a14  08000a14  00002050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a14  08000a14  00002050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a14  08000a14  00001a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a18  08000a18  00001a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08000a1c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002050  2**0
                  CONTENTS
 10 .bss          00000208  20000050  20000050  00002050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000258  20000258  00002050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000351c  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ab1  00000000  00000000  0000559c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000338  00000000  00000000  00006050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000265  00000000  00000000  00006388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000191c0  00000000  00000000  000065ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003939  00000000  00000000  0001f7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092b3a  00000000  00000000  000230e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b5c20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d04  00000000  00000000  000b5c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000b6968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  000b6987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000050 	.word	0x20000050
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080008e8 	.word	0x080008e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000054 	.word	0x20000054
 80001cc:	080008e8 	.word	0x080008e8

080001d0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b088      	sub	sp, #32
 80001d4:	af00      	add	r7, sp, #0
	char str[32];
	SystemInit();
 80001d6:	f000 f817 	bl	8000208 <SystemInit>
	UartInit(BAUD_9600);
 80001da:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80001de:	f000 f849 	bl	8000274 <UartInit>
	UartPuts("Enter Strings...\r\n");
 80001e2:	4808      	ldr	r0, [pc, #32]	@ (8000204 <main+0x34>)
 80001e4:	f000 f8e2 	bl	80003ac <UartPuts>
	while(1) {
		UartGets(str);
 80001e8:	463b      	mov	r3, r7
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f8fa 	bl	80003e4 <UartGets>
		strupr(str);
 80001f0:	463b      	mov	r3, r7
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fb42 	bl	800087c <strupr>
		UartPuts(str);
 80001f8:	463b      	mov	r3, r7
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 f8d6 	bl	80003ac <UartPuts>
		UartGets(str);
 8000200:	bf00      	nop
 8000202:	e7f1      	b.n	80001e8 <main+0x18>
 8000204:	08000900 	.word	0x08000900

08000208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  DWT_Init();
 800020c:	f000 f802 	bl	8000214 <DWT_Init>
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}

08000214 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000218:	4b14      	ldr	r3, [pc, #80]	@ (800026c <DWT_Init+0x58>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	4a13      	ldr	r2, [pc, #76]	@ (800026c <DWT_Init+0x58>)
 800021e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000222:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000224:	4b11      	ldr	r3, [pc, #68]	@ (800026c <DWT_Init+0x58>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	4a10      	ldr	r2, [pc, #64]	@ (800026c <DWT_Init+0x58>)
 800022a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800022e:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000230:	4b0f      	ldr	r3, [pc, #60]	@ (8000270 <DWT_Init+0x5c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a0e      	ldr	r2, [pc, #56]	@ (8000270 <DWT_Init+0x5c>)
 8000236:	f023 0301 	bic.w	r3, r3, #1
 800023a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800023c:	4b0c      	ldr	r3, [pc, #48]	@ (8000270 <DWT_Init+0x5c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a0b      	ldr	r2, [pc, #44]	@ (8000270 <DWT_Init+0x5c>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000248:	4b09      	ldr	r3, [pc, #36]	@ (8000270 <DWT_Init+0x5c>)
 800024a:	2200      	movs	r2, #0
 800024c:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800024e:	bf00      	nop
    __ASM volatile ("NOP");
 8000250:	bf00      	nop
    __ASM volatile ("NOP");
 8000252:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <DWT_Init+0x5c>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	2b00      	cmp	r3, #0
 800025a:	bf0c      	ite	eq
 800025c:	2301      	moveq	r3, #1
 800025e:	2300      	movne	r3, #0
 8000260:	b2db      	uxtb	r3, r3
}
 8000262:	4618      	mov	r0, r3
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000edf0 	.word	0xe000edf0
 8000270:	e0001000 	.word	0xe0001000

08000274 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 800027c:	4b31      	ldr	r3, [pc, #196]	@ (8000344 <UartInit+0xd0>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000280:	4a30      	ldr	r2, [pc, #192]	@ (8000344 <UartInit+0xd0>)
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000288:	4b2f      	ldr	r3, [pc, #188]	@ (8000348 <UartInit+0xd4>)
 800028a:	6a1b      	ldr	r3, [r3, #32]
 800028c:	4a2e      	ldr	r2, [pc, #184]	@ (8000348 <UartInit+0xd4>)
 800028e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000292:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 8000294:	4b2c      	ldr	r3, [pc, #176]	@ (8000348 <UartInit+0xd4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a2b      	ldr	r2, [pc, #172]	@ (8000348 <UartInit+0xd4>)
 800029a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800029e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 80002a0:	4b29      	ldr	r3, [pc, #164]	@ (8000348 <UartInit+0xd4>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a28      	ldr	r2, [pc, #160]	@ (8000348 <UartInit+0xd4>)
 80002a6:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80002ac:	4b26      	ldr	r3, [pc, #152]	@ (8000348 <UartInit+0xd4>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4a25      	ldr	r2, [pc, #148]	@ (8000348 <UartInit+0xd4>)
 80002b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002b6:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80002b8:	4b23      	ldr	r3, [pc, #140]	@ (8000348 <UartInit+0xd4>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	4a22      	ldr	r2, [pc, #136]	@ (8000348 <UartInit+0xd4>)
 80002be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002c2:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 80002c4:	4b20      	ldr	r3, [pc, #128]	@ (8000348 <UartInit+0xd4>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4a1f      	ldr	r2, [pc, #124]	@ (8000348 <UartInit+0xd4>)
 80002ca:	f023 030c 	bic.w	r3, r3, #12
 80002ce:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 80002d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <UartInit+0xd0>)
 80002d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000344 <UartInit+0xd0>)
 80002d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002da:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 80002dc:	4b1b      	ldr	r3, [pc, #108]	@ (800034c <UartInit+0xd8>)
 80002de:	220c      	movs	r2, #12
 80002e0:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 80002e2:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <UartInit+0xd8>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <UartInit+0xd8>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80002f4:	d016      	beq.n	8000324 <UartInit+0xb0>
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80002fc:	d816      	bhi.n	800032c <UartInit+0xb8>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000304:	d004      	beq.n	8000310 <UartInit+0x9c>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 800030c:	d005      	beq.n	800031a <UartInit+0xa6>
 800030e:	e00d      	b.n	800032c <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000310:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <UartInit+0xd8>)
 8000312:	f240 6283 	movw	r2, #1667	@ 0x683
 8000316:	609a      	str	r2, [r3, #8]
			break;
 8000318:	e008      	b.n	800032c <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 800031a:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <UartInit+0xd8>)
 800031c:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000320:	609a      	str	r2, [r3, #8]
			break;
 8000322:	e003      	b.n	800032c <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 8000324:	4b09      	ldr	r3, [pc, #36]	@ (800034c <UartInit+0xd8>)
 8000326:	228b      	movs	r2, #139	@ 0x8b
 8000328:	609a      	str	r2, [r3, #8]
			break;
 800032a:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <UartInit+0xd8>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	4a06      	ldr	r2, [pc, #24]	@ (800034c <UartInit+0xd8>)
 8000332:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000336:	60d3      	str	r3, [r2, #12]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	40023800 	.word	0x40023800
 8000348:	40020000 	.word	0x40020000
 800034c:	40004400 	.word	0x40004400

08000350 <UartPutch>:

void UartPutch(uint8_t ch) {
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 800035a:	bf00      	nop
 800035c:	4b07      	ldr	r3, [pc, #28]	@ (800037c <UartPutch+0x2c>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000364:	2b00      	cmp	r3, #0
 8000366:	d0f9      	beq.n	800035c <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 8000368:	4a04      	ldr	r2, [pc, #16]	@ (800037c <UartPutch+0x2c>)
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	6053      	str	r3, [r2, #4]
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40004400 	.word	0x40004400

08000380 <UartGetch>:

uint8_t UartGetch(void) {
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 8000386:	bf00      	nop
 8000388:	4b07      	ldr	r3, [pc, #28]	@ (80003a8 <UartGetch+0x28>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f003 0320 	and.w	r3, r3, #32
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0f9      	beq.n	8000388 <UartGetch+0x8>
		;
	// read received byte from RDR
	char ch = USART2->DR;
 8000394:	4b04      	ldr	r3, [pc, #16]	@ (80003a8 <UartGetch+0x28>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	71fb      	strb	r3, [r7, #7]
	return ch;
 800039a:	79fb      	ldrb	r3, [r7, #7]
}
 800039c:	4618      	mov	r0, r3
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	40004400 	.word	0x40004400

080003ac <UartPuts>:

void UartPuts(char str[]) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	e009      	b.n	80003ce <UartPuts+0x22>
		UartPutch(str[i]);
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4413      	add	r3, r2
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ffc4 	bl	8000350 <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	3301      	adds	r3, #1
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	4413      	add	r3, r2
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d1ef      	bne.n	80003ba <UartPuts+0xe>
}
 80003da:	bf00      	nop
 80003dc:	bf00      	nop
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <UartGets>:

void UartGets(char str[]) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	int i=0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 80003f0:	f7ff ffc6 	bl	8000380 <UartGetch>
 80003f4:	4603      	mov	r3, r0
 80003f6:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	7afa      	ldrb	r2, [r7, #11]
 8000400:	701a      	strb	r2, [r3, #0]
		i++;
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	3301      	adds	r3, #1
 8000406:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 8000408:	7afb      	ldrb	r3, [r7, #11]
 800040a:	2b0d      	cmp	r3, #13
 800040c:	d1f0      	bne.n	80003f0 <UartGets+0xc>
	str[i] = '\n';
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	4413      	add	r3, r2
 8000414:	220a      	movs	r2, #10
 8000416:	701a      	strb	r2, [r3, #0]
	i++;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	3301      	adds	r3, #1
 800041c:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	4413      	add	r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
}
 8000428:	bf00      	nop
 800042a:	3710      	adds	r7, #16
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000430:	480d      	ldr	r0, [pc, #52]	@ (8000468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000434:	f7ff fee8 	bl	8000208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000438:	480c      	ldr	r0, [pc, #48]	@ (800046c <LoopForever+0x6>)
  ldr r1, =_edata
 800043a:	490d      	ldr	r1, [pc, #52]	@ (8000470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800043c:	4a0d      	ldr	r2, [pc, #52]	@ (8000474 <LoopForever+0xe>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000450:	4c0a      	ldr	r4, [pc, #40]	@ (800047c <LoopForever+0x16>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800045e:	f000 fa1f 	bl	80008a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000462:	f7ff feb5 	bl	80001d0 <main>

08000466 <LoopForever>:

LoopForever:
  b LoopForever
 8000466:	e7fe      	b.n	8000466 <LoopForever>
  ldr   r0, =_estack
 8000468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800046c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000470:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000474:	08000a1c 	.word	0x08000a1c
  ldr r2, =_sbss
 8000478:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800047c:	20000258 	.word	0x20000258

08000480 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000480:	e7fe      	b.n	8000480 <ADC_IRQHandler>

08000482 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000482:	b480      	push	{r7}
 8000484:	b085      	sub	sp, #20
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	689a      	ldr	r2, [r3, #8]
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	683a      	ldr	r2, [r7, #0]
 80004a6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	1c5a      	adds	r2, r3, #1
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	601a      	str	r2, [r3, #0]
}
 80004be:	bf00      	nop
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80004ca:	b480      	push	{r7}
 80004cc:	b085      	sub	sp, #20
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	691b      	ldr	r3, [r3, #16]
 80004d6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	6892      	ldr	r2, [r2, #8]
 80004e0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	689b      	ldr	r3, [r3, #8]
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	6852      	ldr	r2, [r2, #4]
 80004ea:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d103      	bne.n	80004fe <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	689a      	ldr	r2, [r3, #8]
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	1e5a      	subs	r2, r3, #1
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	681b      	ldr	r3, [r3, #0]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800052a:	4b4f      	ldr	r3, [pc, #316]	@ (8000668 <xTaskIncrementTick+0x148>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	f040 808f 	bne.w	8000652 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000534:	4b4d      	ldr	r3, [pc, #308]	@ (800066c <xTaskIncrementTick+0x14c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800053c:	4a4b      	ldr	r2, [pc, #300]	@ (800066c <xTaskIncrementTick+0x14c>)
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d121      	bne.n	800058c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000548:	4b49      	ldr	r3, [pc, #292]	@ (8000670 <xTaskIncrementTick+0x150>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d00b      	beq.n	800056a <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000556:	f383 8811 	msr	BASEPRI, r3
 800055a:	f3bf 8f6f 	isb	sy
 800055e:	f3bf 8f4f 	dsb	sy
 8000562:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	e7fd      	b.n	8000566 <xTaskIncrementTick+0x46>
 800056a:	4b41      	ldr	r3, [pc, #260]	@ (8000670 <xTaskIncrementTick+0x150>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	4b40      	ldr	r3, [pc, #256]	@ (8000674 <xTaskIncrementTick+0x154>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a3e      	ldr	r2, [pc, #248]	@ (8000670 <xTaskIncrementTick+0x150>)
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4a3e      	ldr	r2, [pc, #248]	@ (8000674 <xTaskIncrementTick+0x154>)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	4b3e      	ldr	r3, [pc, #248]	@ (8000678 <xTaskIncrementTick+0x158>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	3301      	adds	r3, #1
 8000584:	4a3c      	ldr	r2, [pc, #240]	@ (8000678 <xTaskIncrementTick+0x158>)
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	f000 f8e8 	bl	800075c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800058c:	4b3b      	ldr	r3, [pc, #236]	@ (800067c <xTaskIncrementTick+0x15c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	429a      	cmp	r2, r3
 8000594:	d348      	bcc.n	8000628 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000596:	4b36      	ldr	r3, [pc, #216]	@ (8000670 <xTaskIncrementTick+0x150>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d104      	bne.n	80005aa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80005a0:	4b36      	ldr	r3, [pc, #216]	@ (800067c <xTaskIncrementTick+0x15c>)
 80005a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005a6:	601a      	str	r2, [r3, #0]
                    break;
 80005a8:	e03e      	b.n	8000628 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80005aa:	4b31      	ldr	r3, [pc, #196]	@ (8000670 <xTaskIncrementTick+0x150>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d203      	bcs.n	80005ca <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80005c2:	4a2e      	ldr	r2, [pc, #184]	@ (800067c <xTaskIncrementTick+0x15c>)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80005c8:	e02e      	b.n	8000628 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	3304      	adds	r3, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ff7b 	bl	80004ca <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d004      	beq.n	80005e6 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	3318      	adds	r3, #24
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ff72 	bl	80004ca <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005ea:	2201      	movs	r2, #1
 80005ec:	409a      	lsls	r2, r3
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <xTaskIncrementTick+0x160>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	4a22      	ldr	r2, [pc, #136]	@ (8000680 <xTaskIncrementTick+0x160>)
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005fc:	4613      	mov	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4a1f      	ldr	r2, [pc, #124]	@ (8000684 <xTaskIncrementTick+0x164>)
 8000606:	441a      	add	r2, r3
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	3304      	adds	r3, #4
 800060c:	4619      	mov	r1, r3
 800060e:	4610      	mov	r0, r2
 8000610:	f7ff ff37 	bl	8000482 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000618:	4b1b      	ldr	r3, [pc, #108]	@ (8000688 <xTaskIncrementTick+0x168>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800061e:	429a      	cmp	r2, r3
 8000620:	d3b9      	bcc.n	8000596 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8000622:	2301      	movs	r3, #1
 8000624:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000626:	e7b6      	b.n	8000596 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000628:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <xTaskIncrementTick+0x168>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800062e:	4915      	ldr	r1, [pc, #84]	@ (8000684 <xTaskIncrementTick+0x164>)
 8000630:	4613      	mov	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4413      	add	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	440b      	add	r3, r1
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d901      	bls.n	8000644 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8000640:	2301      	movs	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <xTaskIncrementTick+0x16c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d007      	beq.n	800065c <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 800064c:	2301      	movs	r3, #1
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	e004      	b.n	800065c <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000652:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <xTaskIncrementTick+0x170>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	3301      	adds	r3, #1
 8000658:	4a0d      	ldr	r2, [pc, #52]	@ (8000690 <xTaskIncrementTick+0x170>)
 800065a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800065c:	697b      	ldr	r3, [r7, #20]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000011c 	.word	0x2000011c
 800066c:	20000104 	.word	0x20000104
 8000670:	200000fc 	.word	0x200000fc
 8000674:	20000100 	.word	0x20000100
 8000678:	20000114 	.word	0x20000114
 800067c:	20000118 	.word	0x20000118
 8000680:	20000108 	.word	0x20000108
 8000684:	20000070 	.word	0x20000070
 8000688:	2000006c 	.word	0x2000006c
 800068c:	20000110 	.word	0x20000110
 8000690:	2000010c 	.word	0x2000010c

08000694 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000694:	b480      	push	{r7}
 8000696:	b087      	sub	sp, #28
 8000698:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800069a:	4b2a      	ldr	r3, [pc, #168]	@ (8000744 <vTaskSwitchContext+0xb0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d003      	beq.n	80006aa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80006a2:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <vTaskSwitchContext+0xb4>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80006a8:	e045      	b.n	8000736 <vTaskSwitchContext+0xa2>
        xYieldPending = pdFALSE;
 80006aa:	4b27      	ldr	r3, [pc, #156]	@ (8000748 <vTaskSwitchContext+0xb4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80006b0:	4b26      	ldr	r3, [pc, #152]	@ (800074c <vTaskSwitchContext+0xb8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	fab3 f383 	clz	r3, r3
 80006bc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80006be:	7afb      	ldrb	r3, [r7, #11]
 80006c0:	f1c3 031f 	rsb	r3, r3, #31
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	4922      	ldr	r1, [pc, #136]	@ (8000750 <vTaskSwitchContext+0xbc>)
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	4613      	mov	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4413      	add	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	440b      	add	r3, r1
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d10b      	bne.n	80006f2 <vTaskSwitchContext+0x5e>
        __asm volatile
 80006da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006de:	f383 8811 	msr	BASEPRI, r3
 80006e2:	f3bf 8f6f 	isb	sy
 80006e6:	f3bf 8f4f 	dsb	sy
 80006ea:	607b      	str	r3, [r7, #4]
    }
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	e7fd      	b.n	80006ee <vTaskSwitchContext+0x5a>
 80006f2:	697a      	ldr	r2, [r7, #20]
 80006f4:	4613      	mov	r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	4413      	add	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4a14      	ldr	r2, [pc, #80]	@ (8000750 <vTaskSwitchContext+0xbc>)
 80006fe:	4413      	add	r3, r2
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	3308      	adds	r3, #8
 8000714:	429a      	cmp	r2, r3
 8000716:	d104      	bne.n	8000722 <vTaskSwitchContext+0x8e>
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	685a      	ldr	r2, [r3, #4]
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	4a0a      	ldr	r2, [pc, #40]	@ (8000754 <vTaskSwitchContext+0xc0>)
 800072a:	6013      	str	r3, [r2, #0]
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <vTaskSwitchContext+0xc0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	334c      	adds	r3, #76	@ 0x4c
 8000732:	4a09      	ldr	r2, [pc, #36]	@ (8000758 <vTaskSwitchContext+0xc4>)
 8000734:	6013      	str	r3, [r2, #0]
}
 8000736:	bf00      	nop
 8000738:	371c      	adds	r7, #28
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	2000011c 	.word	0x2000011c
 8000748:	20000110 	.word	0x20000110
 800074c:	20000108 	.word	0x20000108
 8000750:	20000070 	.word	0x20000070
 8000754:	2000006c 	.word	0x2000006c
 8000758:	20000000 	.word	0x20000000

0800075c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000760:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <prvResetNextTaskUnblockTime+0x30>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <prvResetNextTaskUnblockTime+0x34>)
 800076c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000770:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000772:	e005      	b.n	8000780 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <prvResetNextTaskUnblockTime+0x30>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a04      	ldr	r2, [pc, #16]	@ (8000790 <prvResetNextTaskUnblockTime+0x34>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	200000fc 	.word	0x200000fc
 8000790:	20000118 	.word	0x20000118
	...

080007a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80007a0:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <pxCurrentTCBConst2>)
 80007a2:	6819      	ldr	r1, [r3, #0]
 80007a4:	6808      	ldr	r0, [r1, #0]
 80007a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007aa:	f380 8809 	msr	PSP, r0
 80007ae:	f3bf 8f6f 	isb	sy
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	f380 8811 	msr	BASEPRI, r0
 80007ba:	4770      	bx	lr
 80007bc:	f3af 8000 	nop.w

080007c0 <pxCurrentTCBConst2>:
 80007c0:	2000006c 	.word	0x2000006c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
	...

080007d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80007d0:	f3ef 8009 	mrs	r0, PSP
 80007d4:	f3bf 8f6f 	isb	sy
 80007d8:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <pxCurrentTCBConst>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	f01e 0f10 	tst.w	lr, #16
 80007e0:	bf08      	it	eq
 80007e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80007e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007ea:	6010      	str	r0, [r2, #0]
 80007ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80007f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80007f4:	f380 8811 	msr	BASEPRI, r0
 80007f8:	f3bf 8f4f 	dsb	sy
 80007fc:	f3bf 8f6f 	isb	sy
 8000800:	f7ff ff48 	bl	8000694 <vTaskSwitchContext>
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	f380 8811 	msr	BASEPRI, r0
 800080c:	bc09      	pop	{r0, r3}
 800080e:	6819      	ldr	r1, [r3, #0]
 8000810:	6808      	ldr	r0, [r1, #0]
 8000812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000816:	f01e 0f10 	tst.w	lr, #16
 800081a:	bf08      	it	eq
 800081c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000820:	f380 8809 	msr	PSP, r0
 8000824:	f3bf 8f6f 	isb	sy
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	f3af 8000 	nop.w

08000830 <pxCurrentTCBConst>:
 8000830:	2000006c 	.word	0x2000006c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop

08000838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
        __asm volatile
 800083e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000842:	f383 8811 	msr	BASEPRI, r3
 8000846:	f3bf 8f6f 	isb	sy
 800084a:	f3bf 8f4f 	dsb	sy
 800084e:	607b      	str	r3, [r7, #4]
    }
 8000850:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000852:	f7ff fe65 	bl	8000520 <xTaskIncrementTick>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d003      	beq.n	8000864 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <SysTick_Handler+0x40>)
 800085e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	2300      	movs	r3, #0
 8000866:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800086e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	e000ed04 	.word	0xe000ed04

0800087c <strupr>:
 800087c:	b510      	push	{r4, lr}
 800087e:	4c07      	ldr	r4, [pc, #28]	@ (800089c <strupr+0x20>)
 8000880:	1e42      	subs	r2, r0, #1
 8000882:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8000886:	b903      	cbnz	r3, 800088a <strupr+0xe>
 8000888:	bd10      	pop	{r4, pc}
 800088a:	5ce1      	ldrb	r1, [r4, r3]
 800088c:	f001 0103 	and.w	r1, r1, #3
 8000890:	2902      	cmp	r1, #2
 8000892:	bf08      	it	eq
 8000894:	3b20      	subeq	r3, #32
 8000896:	7013      	strb	r3, [r2, #0]
 8000898:	e7f3      	b.n	8000882 <strupr+0x6>
 800089a:	bf00      	nop
 800089c:	08000914 	.word	0x08000914

080008a0 <__libc_init_array>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	4d0d      	ldr	r5, [pc, #52]	@ (80008d8 <__libc_init_array+0x38>)
 80008a4:	4c0d      	ldr	r4, [pc, #52]	@ (80008dc <__libc_init_array+0x3c>)
 80008a6:	1b64      	subs	r4, r4, r5
 80008a8:	10a4      	asrs	r4, r4, #2
 80008aa:	2600      	movs	r6, #0
 80008ac:	42a6      	cmp	r6, r4
 80008ae:	d109      	bne.n	80008c4 <__libc_init_array+0x24>
 80008b0:	4d0b      	ldr	r5, [pc, #44]	@ (80008e0 <__libc_init_array+0x40>)
 80008b2:	4c0c      	ldr	r4, [pc, #48]	@ (80008e4 <__libc_init_array+0x44>)
 80008b4:	f000 f818 	bl	80008e8 <_init>
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	10a4      	asrs	r4, r4, #2
 80008bc:	2600      	movs	r6, #0
 80008be:	42a6      	cmp	r6, r4
 80008c0:	d105      	bne.n	80008ce <__libc_init_array+0x2e>
 80008c2:	bd70      	pop	{r4, r5, r6, pc}
 80008c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80008c8:	4798      	blx	r3
 80008ca:	3601      	adds	r6, #1
 80008cc:	e7ee      	b.n	80008ac <__libc_init_array+0xc>
 80008ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80008d2:	4798      	blx	r3
 80008d4:	3601      	adds	r6, #1
 80008d6:	e7f2      	b.n	80008be <__libc_init_array+0x1e>
 80008d8:	08000a14 	.word	0x08000a14
 80008dc:	08000a14 	.word	0x08000a14
 80008e0:	08000a14 	.word	0x08000a14
 80008e4:	08000a18 	.word	0x08000a18

080008e8 <_init>:
 80008e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ea:	bf00      	nop
 80008ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ee:	bc08      	pop	{r3}
 80008f0:	469e      	mov	lr, r3
 80008f2:	4770      	bx	lr

080008f4 <_fini>:
 80008f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f6:	bf00      	nop
 80008f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008fa:	bc08      	pop	{r3}
 80008fc:	469e      	mov	lr, r3
 80008fe:	4770      	bx	lr
